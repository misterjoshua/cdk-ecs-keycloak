// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fargate 1`] = `
Object {
  "Outputs": Object {
    "ServiceLoadBalancerDNSEC5B149E": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "ServiceLBE9A1ADBC",
          "DNSName",
        ],
      },
    },
    "ServiceServiceURL250C0FB6": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "ServiceLBE9A1ADBC",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "ClusterDefaultServiceDiscoveryNamespaceC336F9B4": Object {
      "Properties": Object {
        "Name": "integ-ec2",
        "Vpc": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
    },
    "ClusterEB0386A7": Object {
      "Type": "AWS::ECS::Cluster",
    },
    "ClustercapacityASG73C65867": Object {
      "Properties": Object {
        "DesiredCapacity": "4",
        "LaunchConfigurationName": Object {
          "Ref": "ClustercapacityLaunchConfig5AF4EF2A",
        },
        "MaxSize": "4",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "integ-ec2/Cluster/capacity",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Ref": "VpcpublicSubnet1Subnet2BB74ED7",
          },
          Object {
            "Ref": "VpcpublicSubnet2SubnetE34B022A",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingReplacingUpdate": Object {
          "WillReplace": true,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ClustercapacityDrainECSHookFunction0E828EC6": Object {
      "DependsOn": Array [
        "ClustercapacityDrainECSHookFunctionServiceRoleDefaultPolicyB4C76CBC",
        "ClustercapacityDrainECSHookFunctionServiceRole6B7C7732",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(event))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(event))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  while has_tasks(cluster, instance_arn):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  \\"\\"\\"Turn an instance ID into a container instance ARN.\\"\\"\\"
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]


def has_tasks(cluster, instance_arn):
  \\"\\"\\"Return True if the instance is running tasks for the given cluster.\\"\\"\\"
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
  print('Instance %s has %s tasks' % (instance_arn, tasks))

  return tasks > 0


def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  \\"\\"\\"Pick a subset of a dict.\\"\\"\\"
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "ClusterEB0386A7",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ClustercapacityDrainECSHookFunctionServiceRole6B7C7732",
            "Arn",
          ],
        },
        "Runtime": "python3.6",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Cluster/capacity",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ClustercapacityDrainECSHookFunctionAllowInvokeintegec2ClustercapacityLifecycleHookDrainHookTopic10321016D907DBF6": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ClustercapacityDrainECSHookFunction0E828EC6",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "ClustercapacityLifecycleHookDrainHookTopic4134582C",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ClustercapacityDrainECSHookFunctionServiceRole6B7C7732": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Cluster/capacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClustercapacityDrainECSHookFunctionServiceRoleDefaultPolicyB4C76CBC": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "ClustercapacityASG73C65867",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClustercapacityDrainECSHookFunctionServiceRoleDefaultPolicyB4C76CBC",
        "Roles": Array [
          Object {
            "Ref": "ClustercapacityDrainECSHookFunctionServiceRole6B7C7732",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClustercapacityDrainECSHookFunctionTopic8FD3D61E": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "ClustercapacityDrainECSHookFunction0E828EC6",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "ClustercapacityLifecycleHookDrainHookTopic4134582C",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ClustercapacityInstanceProfileA6D88AB0": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ClustercapacityInstanceRoleC67C613F",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ClustercapacityInstanceRoleC67C613F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonS3FullAccess",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Cluster/capacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClustercapacityInstanceRoleDefaultPolicy71F95536": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClustercapacityInstanceRoleDefaultPolicy71F95536",
        "Roles": Array [
          Object {
            "Ref": "ClustercapacityInstanceRoleC67C613F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClustercapacityInstanceSecurityGroup8FC426EA": Object {
      "Properties": Object {
        "GroupDescription": "integ-ec2/Cluster/capacity/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Cluster/capacity",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ClustercapacityLaunchConfig5AF4EF2A": Object {
      "DependsOn": Array [
        "ClustercapacityInstanceRoleDefaultPolicy71F95536",
        "ClustercapacityInstanceRoleC67C613F",
      ],
      "Properties": Object {
        "IamInstanceProfile": Object {
          "Ref": "ClustercapacityInstanceProfileA6D88AB0",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3.small",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ClustercapacityInstanceSecurityGroup8FC426EA",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
echo ECS_CLUSTER=",
                Object {
                  "Ref": "ClusterEB0386A7",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
yum install -y https://s3.region.amazonaws.com/amazon-ssm-region/latest/linux_arm64/amazon-ssm-agent.rpm
systemctl enable amazon-ssm-agent
systemctl start amazon-ssm-agent",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ClustercapacityLifecycleHookDrainHook44441A0C": Object {
      "DependsOn": Array [
        "ClustercapacityLifecycleHookDrainHookRoleDefaultPolicyA6C71A04",
        "ClustercapacityLifecycleHookDrainHookRole1794CC7A",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClustercapacityASG73C65867",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "ClustercapacityLifecycleHookDrainHookTopic4134582C",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "ClustercapacityLifecycleHookDrainHookRole1794CC7A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ClustercapacityLifecycleHookDrainHookRole1794CC7A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Cluster/capacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClustercapacityLifecycleHookDrainHookRoleDefaultPolicyA6C71A04": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ClustercapacityLifecycleHookDrainHookTopic4134582C",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClustercapacityLifecycleHookDrainHookRoleDefaultPolicyA6C71A04",
        "Roles": Array [
          Object {
            "Ref": "ClustercapacityLifecycleHookDrainHookRole1794CC7A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClustercapacityLifecycleHookDrainHookTopic4134582C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Cluster/capacity",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "DB4924F778": Object {
      "Properties": Object {
        "AllocatedStorage": "100",
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t2.micro",
        "DBSubnetGroupName": Object {
          "Ref": "DBSubnetGroupAE8F8683",
        },
        "Engine": "mysql",
        "EngineVersion": "8.0",
        "MasterUserPassword": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "DBSecretB8D1B379",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "DBSecretB8D1B379",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "PubliclyAccessible": true,
        "StorageType": "gp2",
        "VPCSecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "DBSecurityGroup302CDD63",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Snapshot",
    },
    "DBSecretAttachment1CF7DE47": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "DBSecretB8D1B379",
        },
        "TargetId": Object {
          "Ref": "DB4924F778",
        },
        "TargetType": "AWS::RDS::DBInstance",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "DBSecretB8D1B379": Object {
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Generated by the CDK for stack: ",
              Object {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": Object {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{\\"username\\":\\"admin\\"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
    },
    "DBSecurityGroup302CDD63": Object {
      "Properties": Object {
        "GroupDescription": "Security group for DB database",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DBSecurityGroupfromintegec2ServiceSecurityGroupE281D2EDIndirectPortFA393162": Object {
      "Properties": Object {
        "Description": "from integec2ServiceSecurityGroupE281D2ED:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DBSecurityGroup302CDD63",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceSecurityGroupEEA09B68",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DBSubnetGroupAE8F8683": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnet group for DB database",
        "SubnetIds": Array [
          Object {
            "Ref": "VpcpublicSubnet1Subnet2BB74ED7",
          },
          Object {
            "Ref": "VpcpublicSubnet2SubnetE34B022A",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "Service9571FDD8": Object {
      "DependsOn": Array [
        "ServiceLBPublicListenerECSGroup0CC8688C",
        "ServiceLBPublicListener46709EAA",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100,
        },
        "DesiredCount": 4,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 600,
        "LaunchType": "EC2",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "keycloak",
            "ContainerPort": 8080,
            "TargetGroupArn": Object {
              "Ref": "ServiceLBPublicListenerECSGroup0CC8688C",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "ServiceSecurityGroupEEA09B68",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VpcpublicSubnet1Subnet2BB74ED7",
              },
              Object {
                "Ref": "VpcpublicSubnet2SubnetE34B022A",
              },
            ],
          },
        },
        "SchedulingStrategy": "REPLICA",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "keycloak",
            "ContainerPort": 55200,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "ServiceCloudmapServiceDE76B29D",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "TaskDefinitionB36D86D9",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "ServiceCloudmapServiceDE76B29D": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "foobar",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "ServiceLBE9A1ADBC": Object {
      "DependsOn": Array [
        "VpcpublicSubnet1DefaultRouteB88F9E93",
        "VpcpublicSubnet2DefaultRoute732F0BEB",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ServiceLBSecurityGroupF7435A5C",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "VpcpublicSubnet1Subnet2BB74ED7",
          },
          Object {
            "Ref": "VpcpublicSubnet2SubnetE34B022A",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "ServiceLBPublicListener46709EAA": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ServiceLBPublicListenerECSGroup0CC8688C",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ServiceLBE9A1ADBC",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ServiceLBPublicListenerECSGroup0CC8688C": Object {
      "Properties": Object {
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "ServiceLBSecurityGroupF7435A5C": Object {
      "Properties": Object {
        "GroupDescription": "Automatically created Security Group for ELB integec2ServiceLB0B25F552",
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ServiceLBSecurityGrouptointegec2ServiceSecurityGroupE281D2ED80805687C386": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceSecurityGroupEEA09B68",
            "GroupId",
          ],
        },
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceLBSecurityGroupF7435A5C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "ServiceSecurityGroupEEA09B68": Object {
      "Properties": Object {
        "GroupDescription": "integ-ec2/Service/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ServiceSecurityGroupfromintegec2ServiceLBSecurityGroup492EF4838080A283E10A": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceSecurityGroupEEA09B68",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceLBSecurityGroupF7435A5C",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ServiceSecurityGroupfromintegec2ServiceSecurityGroupE281D2EDALLTRAFFICCB9D774F": Object {
      "Properties": Object {
        "Description": "from integec2ServiceSecurityGroupE281D2ED:ALL TRAFFIC",
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceSecurityGroupEEA09B68",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceSecurityGroupEEA09B68",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "TaskDefinitionB36D86D9": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "COMPLETE",
                "ContainerName": "ensure-mysql-database",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "KEYCLOAK_USER",
                "Value": "admin",
              },
              Object {
                "Name": "KEYCLOAK_PASSWORD",
                "Value": "admin",
              },
              Object {
                "Name": "DB_VENDOR",
                "Value": "mysql",
              },
              Object {
                "Name": "DB_NAME",
                "Value": "keycloak",
              },
              Object {
                "Name": "JGROUPS_DISCOVERY_PROTOCOL",
                "Value": "dns.DNS_PING",
              },
              Object {
                "Name": "JGROUPS_DISCOVERY_PROPERTIES",
                "Value": Object {
                  "Fn::Sub": Array [
                    "dns_query=\${ServiceName}.\${ServiceNamespace},dns_record_type=\${QueryType}",
                    Object {
                      "QueryType": "A",
                      "ServiceName": Object {
                        "Fn::GetAtt": Array [
                          "ServiceCloudmapServiceDE76B29D",
                          "Name",
                        ],
                      },
                      "ServiceNamespace": "integ-ec2",
                    },
                  ],
                },
              },
              Object {
                "Name": "CACHE_OWNERS_COUNT",
                "Value": "2",
              },
              Object {
                "Name": "CACHE_OWNERS_AUTH_SESSIONS_COUNT",
                "Value": "2",
              },
            ],
            "Essential": true,
            "Image": "jboss/keycloak",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "TaskDefinitionkeycloakLogGroup66419D9A",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "/cdk-ecs-keycloak",
              },
            },
            "Memory": 512,
            "MemoryReservation": 410,
            "Name": "keycloak",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 7600,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 57600,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 55200,
                "Protocol": "udp",
              },
              Object {
                "ContainerPort": 54200,
                "Protocol": "udp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "DB_ADDR",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          Object {
            "Command": Array [
              "sh",
              "-c",
              "mysql -u\\"$DB_USER\\" -p\\"$DB_PASSWORD\\" -h\\"$DB_ADDR\\" -e \\"CREATE DATABASE IF NOT EXISTS $DB_NAME\\"",
            ],
            "Environment": Array [
              Object {
                "Name": "DB_NAME",
                "Value": "keycloak",
              },
            ],
            "Essential": false,
            "Image": "mysql",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "TaskDefinitionensuremysqldatabaseLogGroupA3DB2A4C",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "/cdk-ecs-keycloak",
              },
            },
            "Memory": 128,
            "MemoryReservation": 32,
            "Name": "ensure-mysql-database",
            "Secrets": Array [
              Object {
                "Name": "DB_ADDR",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
        ],
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "TaskDefinitionExecutionRole8D61C2FB",
            "Arn",
          ],
        },
        "Family": "integec2TaskDefinitionAEAFB7CA",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "EC2",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "TaskDefinitionTaskRoleFD40A61D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "TaskDefinitionExecutionRole8D61C2FB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TaskDefinitionExecutionRoleDefaultPolicy1F3406F5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TaskDefinitionkeycloakLogGroup66419D9A",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TaskDefinitionensuremysqldatabaseLogGroupA3DB2A4C",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TaskDefinitionExecutionRoleDefaultPolicy1F3406F5",
        "Roles": Array [
          Object {
            "Ref": "TaskDefinitionExecutionRole8D61C2FB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TaskDefinitionTaskRoleFD40A61D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TaskDefinitionensuremysqldatabaseLogGroupA3DB2A4C": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "TaskDefinitionkeycloakLogGroup66419D9A": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcVPCGWBF912B6E": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "VpcpublicSubnet1DefaultRouteB88F9E93": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcpublicSubnet1RouteTable15C15F8E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcpublicSubnet1RouteTable15C15F8E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Vpc/publicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcpublicSubnet1RouteTableAssociation4E83B6E4": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcpublicSubnet1RouteTable15C15F8E",
        },
        "SubnetId": Object {
          "Ref": "VpcpublicSubnet1Subnet2BB74ED7",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcpublicSubnet1Subnet2BB74ED7": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/22",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Vpc/publicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcpublicSubnet2DefaultRoute732F0BEB": Object {
      "DependsOn": Array [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": Object {
          "Ref": "VpcpublicSubnet2RouteTableC5A6DF77",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcpublicSubnet2RouteTableAssociationCCE257FF": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcpublicSubnet2RouteTableC5A6DF77",
        },
        "SubnetId": Object {
          "Ref": "VpcpublicSubnet2SubnetE34B022A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcpublicSubnet2RouteTableC5A6DF77": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Vpc/publicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcpublicSubnet2SubnetE34B022A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.4.0/22",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "integ-ec2/Vpc/publicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
  },
}
`;
